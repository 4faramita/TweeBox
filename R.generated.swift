//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `hashtag`.
    static let hashtag = Rswift.ImageResource(bundle: R.hostingBundle, name: "hashtag")
    /// Image `launch_screen`.
    static let launch_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_screen")
    /// Image `like_false`.
    static let like_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_false")
    /// Image `like_true`.
    static let like_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "like_true")
    /// Image `mention_thin`.
    static let mention_thin = Rswift.ImageResource(bundle: R.hostingBundle, name: "mention_thin")
    /// Image `mention`.
    static let mention = Rswift.ImageResource(bundle: R.hostingBundle, name: "mention")
    /// Image `picPlaceholder`.
    static let picPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "picPlaceholder")
    /// Image `picture`.
    static let picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture")
    /// Image `play_gif`.
    static let play_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_gif")
    /// Image `play_video`.
    static let play_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_video")
    /// Image `profile_selected`.
    static let profile_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_selected")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `reply_false`.
    static let reply_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "reply_false")
    /// Image `reply_true`.
    static let reply_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "reply_true")
    /// Image `reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "reply")
    /// Image `retweet_false`.
    static let retweet_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "retweet_false")
    /// Image `retweet_true`.
    static let retweet_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "retweet_true")
    /// Image `twitter_selected`.
    static let twitter_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter_selected")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hashtag", bundle: ..., traitCollection: ...)`
    static func hashtag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hashtag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_screen", bundle: ..., traitCollection: ...)`
    static func launch_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "like_false", bundle: ..., traitCollection: ...)`
    static func like_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_false, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "like_true", bundle: ..., traitCollection: ...)`
    static func like_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_true, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mention", bundle: ..., traitCollection: ...)`
    static func mention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mention, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mention_thin", bundle: ..., traitCollection: ...)`
    static func mention_thin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mention_thin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "picPlaceholder", bundle: ..., traitCollection: ...)`
    static func picPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "picture", bundle: ..., traitCollection: ...)`
    static func picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play_gif", bundle: ..., traitCollection: ...)`
    static func play_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_gif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play_video", bundle: ..., traitCollection: ...)`
    static func play_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_selected", bundle: ..., traitCollection: ...)`
    static func profile_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reply_false", bundle: ..., traitCollection: ...)`
    static func reply_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply_false, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reply_true", bundle: ..., traitCollection: ...)`
    static func reply_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply_true, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "retweet_false", bundle: ..., traitCollection: ...)`
    static func retweet_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.retweet_false, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "retweet_true", bundle: ..., traitCollection: ...)`
    static func retweet_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.retweet_true, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter_selected", bundle: ..., traitCollection: ...)`
    static func twitter_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter_selected, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Quote Tweet`.
    static let quoteTweet: Rswift.ReuseIdentifier<GeneralTweetTableViewCell> = Rswift.ReuseIdentifier(identifier: "Quote Tweet")
    /// Reuse identifier `Tweet with Media`.
    static let tweetWithMedia: Rswift.ReuseIdentifier<GeneralTweetTableViewCell> = Rswift.ReuseIdentifier(identifier: "Tweet with Media")
    /// Reuse identifier `Tweet`.
    static let tweet: Rswift.ReuseIdentifier<GeneralTweetTableViewCell> = Rswift.ReuseIdentifier(identifier: "Tweet")
    /// Reuse identifier `Twitter User`.
    static let twitterUser: Rswift.ReuseIdentifier<TwitterUserTableViewCell> = Rswift.ReuseIdentifier(identifier: "Twitter User")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 12 view controllers.
  struct segue {
    /// This struct is generated for `FavoriteTimelineTableViewController`, and contains static references to 6 segues.
    struct favoriteTimelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteTimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteTimelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `GeneralSearchViewController`, and contains static references to 4 segues.
    struct tweeBoxGeneralSearchViewController {
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `Show Tweets`.
      static let showTweets: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets")
      /// Segue identifier `Show User`.
      static let showUser: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Show User")
      /// Segue identifier `Show Users`.
      static let showUsers: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Users")
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tweeBoxGeneralSearchViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweets(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tweeBoxGeneralSearchViewController.showTweets, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show User`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUser(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tweeBoxGeneralSearchViewController.showUser, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Users`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUsers(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TweeBox.GeneralSearchViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tweeBoxGeneralSearchViewController.showUsers, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeTimelineTableViewController`, and contains static references to 8 segues.
    struct homeTimelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `User List`.
      static let userList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UserListTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "User List")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `User List`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UserListTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.userList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeTimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeTimelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ImageContainerViewController`, and contains static references to 2 segues.
    struct imageContainerViewController {
      /// Segue identifier `Image Tapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ImageContainerViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Image Tapped")
      /// Segue identifier `Video Tapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ImageContainerViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Video Tapped")
      
      /// Optionally returns a typed version of segue `Image Tapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ImageContainerViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.imageContainerViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Video Tapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ImageContainerViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.imageContainerViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "login")
      
      /// Optionally returns a typed version of segue `login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.login, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MentionTimelineTableViewController`, and contains static references to 6 segues.
    struct mentionTimelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MentionTimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mentionTimelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ReplyTableViewController`, and contains static references to 6 segues.
    struct replyTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `Single Tweet Info`.
      static let singleTweetInfo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, SingleTweetViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Single Tweet Info")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReplyTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Single Tweet Info`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func singleTweetInfo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, SingleTweetViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.singleTweetInfo, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReplyTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.replyTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchTimelineTableViewController`, and contains static references to 5 segues.
    struct searchTimelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchTimelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchTimelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchTimelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchTimelineTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchTimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchTimelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SingleTweetViewController`, and contains static references to 4 segues.
    struct singleTweetViewController {
      /// Segue identifier `Media Container`.
      static let mediaContainer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SingleTweetViewController, ImageContainerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Media Container")
      /// Segue identifier `Retweet List`.
      static let retweetList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SingleTweetViewController, UserListTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Retweet List")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SingleTweetViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SingleTweetViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      
      /// Optionally returns a typed version of segue `Media Container`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mediaContainer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SingleTweetViewController, ImageContainerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.singleTweetViewController.mediaContainer, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Retweet List`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func retweetList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SingleTweetViewController, UserListTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.singleTweetViewController.retweetList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SingleTweetViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.singleTweetViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SingleTweetViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.singleTweetViewController.profileImageTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TimelineTableViewController`, and contains static references to 7 segues.
    struct timelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `profileImageTapped`.
      static let profileImageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "profileImageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profileImageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileImageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.profileImageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserListTableViewController`, and contains static references to 1 segues.
    struct userListTableViewController {
      /// Segue identifier `View User`.
      static let viewUser: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserListTableViewController, UserTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View User")
      
      /// Optionally returns a typed version of segue `View User`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewUser(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserListTableViewController, UserTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userListTableViewController.viewUser, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UserTimelineTableViewController`, and contains static references to 6 segues.
    struct userTimelineTableViewController {
      /// Segue identifier `Compose`.
      static let compose: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Compose")
      /// Segue identifier `Show Tweets with Hashtag`.
      static let showTweetsWithHashtag: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, SearchTimelineTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Show Tweets with Hashtag")
      /// Segue identifier `User List`.
      static let userList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, UserListTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "User List")
      /// Segue identifier `View Tweet`.
      static let viewTweet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, ReplyTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "View Tweet")
      /// Segue identifier `imageTapped`.
      static let imageTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, ImageViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "imageTapped")
      /// Segue identifier `videoTapped`.
      static let videoTapped: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UserTimelineTableViewController, VideoViewerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "videoTapped")
      
      /// Optionally returns a typed version of segue `Compose`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func compose(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.compose, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Show Tweets with Hashtag`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTweetsWithHashtag(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, SearchTimelineTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.showTweetsWithHashtag, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `User List`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func userList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, UserListTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.userList, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `View Tweet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func viewTweet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, ReplyTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.viewTweet, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `imageTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func imageTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, ImageViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.imageTapped, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `videoTapped`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func videoTapped(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UserTimelineTableViewController, VideoViewerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.userTimelineTableViewController.videoTapped, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let generalSearchViewController = StoryboardViewControllerResource<TweeBox.GeneralSearchViewController>(identifier: "GeneralSearchViewController")
      let imageViewer = StoryboardViewControllerResource<ImageViewerViewController>(identifier: "ImageViewer")
      let name = "Main"
      let replyTableViewController = StoryboardViewControllerResource<ReplyTableViewController>(identifier: "ReplyTableViewController")
      let searchTimelineViewController = StoryboardViewControllerResource<SearchTimelineTableViewController>(identifier: "SearchTimelineViewController")
      let userProfileViewController = StoryboardViewControllerResource<UserTimelineTableViewController>(identifier: "UserProfileViewController")
      
      func generalSearchViewController(_: Void = ()) -> TweeBox.GeneralSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: generalSearchViewController)
      }
      
      func imageViewer(_: Void = ()) -> ImageViewerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageViewer)
      }
      
      func replyTableViewController(_: Void = ()) -> ReplyTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: replyTableViewController)
      }
      
      func searchTimelineViewController(_: Void = ()) -> SearchTimelineTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchTimelineViewController)
      }
      
      func userProfileViewController(_: Void = ()) -> UserTimelineTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mention") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mention' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "picture") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'picture' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hashtag") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hashtag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mention_thin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mention_thin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_true") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like_true' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_false") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'like_false' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().generalSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'generalSearchViewController' could not be loaded from storyboard 'Main' as 'TweeBox.GeneralSearchViewController'.") }
        if _R.storyboard.main().userProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileViewController' could not be loaded from storyboard 'Main' as 'UserTimelineTableViewController'.") }
        if _R.storyboard.main().imageViewer() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageViewer' could not be loaded from storyboard 'Main' as 'ImageViewerViewController'.") }
        if _R.storyboard.main().searchTimelineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchTimelineViewController' could not be loaded from storyboard 'Main' as 'SearchTimelineTableViewController'.") }
        if _R.storyboard.main().replyTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'replyTableViewController' could not be loaded from storyboard 'Main' as 'ReplyTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
